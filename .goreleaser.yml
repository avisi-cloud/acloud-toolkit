gitlab_urls:
  api: https://gitlab.avisi.cloud/api/v4/
  download: https://gitlab.avisi.cloud

builds:
  - id: "acloud-toolkit"
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64

before:
  hooks:
    - go mod tidy
    - ./scripts/shell-completions.sh

archives:
  - files:
      - completions/*

brews:
  - # NOTE: make sure the url_template, the token and given repo (github or gitlab) owner and name are from the
    # same kind. We will probably unify this in the next major version like it is done with scoop.

    # GitHub/GitLab repository to push the formula to
    # Gitea is not supported yet, but the support coming
    repository:
      owner: ame
      name: homebrew-ame
      token: "{{ .Env.HOMEBREW_TAP_GITLAB_TOKEN }}"

    # Template for the url which is determined by the given Token (github or gitlab)
    # Default for github is "https://github.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
    # Default for gitlab is "https://gitlab.com/<repo_owner>/<repo_name>/-/releases/{{ .Tag }}/downloads/{{ .ArtifactName }}"
    # Default for gitea is "https://gitea.com/<repo_owner>/<repo_name>/releases/download/{{ .Tag }}/{{ .ArtifactName }}"
    # url_template: "https://gitlab.avisi.cloud/ame/acloud-toolkit/-/releases/{{ .Tag }}/downloads/{{ .ArtifactName }}"
    url_template: "https://avisi-cloud-brew-tap-public.s3.eu-west-1.amazonaws.com/releases/{{ .ProjectName }}/{{.Version}}/{{ .ArtifactName }}"

    # Allows you to set a custom download strategy. Note that you'll need
    # to implement the strategy and add it to your tap repository.
    # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
    # Default is empty.
    download_strategy: CurlDownloadStrategy

    # Allows you to add a custom require_relative at the top of the formula template
    # Default is empty
    #    custom_require: private-gitlab-download-strategy

    # Git author used to commit to the repository.
    # Defaults are shown.
    commit_author:
      name: goreleaserbot
      email: goreleaser@avisi.cloud

    # The project name and current git tag are used in the format string.
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Folder inside the repository to put the formula.
    # Default is the root folder.
    folder: Formula

    # Caveats for the user of your binary.
    # Default is empty.
    #    caveats: "How to use this binary"

    # Your app's homepage.
    # Default is empty.
    homepage: "https://docs.avisi.cloud/"

    # Template of your app's description.
    # Default is empty.
    #    description: "Software to create fast and easy drum rolls."

    # SPDX identifier of your app's license.
    # Default is empty.
    #    license: "MIT"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Default is false.
    #    skip_upload: true

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    # Default is empty.
    #    custom_block: |
    #      head "https://github.com/some/package.git"
    #      ...

    # Packages your package depends on.
    dependencies:
      - name: zsh
        type: optional
      - name: fzf
        type: optional

    # Packages that conflict with your package.
    #    conflicts:
    #      - svn
    #      - bash

    # Specify for packages that run as a service.
    # Default is empty.
    #    plist: |
    #      <?xml version="1.0" encoding="UTF-8"?>
    #      ...

    # So you can `brew test` your formula.
    # Default is empty.
    test: |
      system "#{bin}/acloud-toolkit version"

    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    #    install: |
    #      bin.install "acloud"
    #      ...
    install: |
      bin.install "acloud-toolkit"
      zsh_completion.install "completions/acloud-toolkit.zsh" => "_acloud-toolkit"
      bash_completion.install "completions/acloud-toolkit.bash" => "acloud-toolkit"
      fish_completion.install "completions/acloud-toolkit.fish"

    # Custom post_install script for brew.
    # Could be used to do any additional work after the "install" script
    # Default is empty.
#    post_install: |
#      etc.install "app-config.conf"
#      ...

blobs:
  - provider: s3
    bucket: avisi-cloud-brew-tap-public
    folder: "releases/{{ .ProjectName }}/{{.Version}}"
    region: eu-west-1

dockers:
  - image_templates: ["registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}-amd64"] 
    use: buildx
    dockerfile: Dockerfile.goreleaser
    goos: linux
    goarch: amd64
    build_flag_templates:
      - "--platform=linux/amd64"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.created={{ .Date }}"
  - image_templates: ["registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}-arm64v8"]
    use: buildx
    dockerfile: Dockerfile.goreleaser
    goos: linux
    goarch: arm64
    build_flag_templates:
      - "--platform=linux/arm64/v8"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"
      - "--label=org.opencontainers.image.created={{ .Date }}"

docker_manifests:
  - name_template: "registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}"
    image_templates:
      - "registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}-amd64"
      - "registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}-arm64v8"
  - name_template: "registry.avisi.cloud/library/{{ .ProjectName }}:v{{ .Version }}"
    image_templates:
      - "registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}-amd64"
      - "registry.avisi.cloud/library/{{ .ProjectName }}:{{ .Version }}-arm64v8"

docker_signs:
  - artifacts: all
    args: ["sign", "--key=$COSIGN_KEY", "-a", "builder=gitlab-promote", "${artifact}"]

# Documentation: https://goreleaser.com/customization/changelog/
changelog:
  use: gitlab
  sort: asc
  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Proving no regex means all commits will be grouped under the default group.
  # Groups are disabled when using github-native, as it already groups things by itself.
  groups:
    - title: 'Dependencies'
      regexp: "^Update dependency"
      order: 999
    - title: Changes
      order: 0
  filters:
    # Commit messages matching the regexp listed here will be removed from the changelog
    exclude:
      - '^Merge branch'

announce:
  slack:
    # Whether its enabled or not. Defaults to false.
    enabled: true

    # Message template to use while publishing.
    message_template: '{{.ProjectName}} v{{.Version}} has been released'

    # The name of the channel that the user selected as a destination for webhook messages.
    channel: '#ame-releases'
    # channel: '#ame-releases'

    # Set your Webhook's user name.
    username: ''

    # Emoji to use as the icon for this message. Overrides icon_url.
    icon_emoji: 'ðŸŽ‰'

    # URL to an image to use as the icon for this message.
    icon_url: ''

    # Blocks for advanced formatting, see: https://api.slack.com/messaging/webhooks#advanced_message_formatting
    # and https://api.slack.com/messaging/composing/layouts#adding-blocks.
    #
    # Templating is possible inside this structure.
    #
    # Attention: goreleaser doesn't check the full structure of the Slack API: please make sure that
    # your configuration for advanced message formatting abides by this API.
    blocks: [
      {
        "type": "section",
        "fields": [
          {
            "type": "mrkdwn",
            "text": "A new release has been made"
          }
        ]
      },
      {
        "type": "section",
        "fields": [
          {
            "type": "mrkdwn",
            "text": "*Project:*\n<{{.GitURL}}|{{.ProjectName}}>"
          },
          {
            "type": "mrkdwn",
            "text": "*Release:*\n<{{.ReleaseURL}}|v{{.Version}}>"
          }
        ]
      },
      # couldn't make the releasnotes section work -> ERROR: invalid character '\n' in string literal
      # {
      #   "type": "section",
      #   "fields": [
      #     {
      #       "type": "mrkdwn",
      #       "text": "*Releasenotes:*\n{{.ReleaseNotes}}"
      #     }
      #   ]
      # }
    ]

    # Attachments, see: https://api.slack.com/reference/messaging/attachments
    #
    # Templating is possible inside this structure.
    #
    # Attention: goreleaser doesn't check the full structure of the Slack API: please make sure that
    # your configuration for advanced message formatting abides by this API.
    attachments: []
